{
	"info": {
		"_postman_id": "c42786aa-c874-4e78-8784-4de7911eb28a",
		"name": "JSONPlaceholder API",
		"description": "This collection contains API requests for testing JSONPlaceholder endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41962012"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "UserData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"if (Array.isArray(response) && response.length > 0) {\r",
									"    let userId = response[0].id;\r",
									"    \r",
									"    // Ensure user_id is stored as a string (to prevent weird concatenation)\r",
									"    pm.environment.set(\"user_id\", String(userId));\r",
									"    \r",
									"    console.log(\"Stored user_id:\", pm.environment.get(\"user_id\"));\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array and contains users\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"First user contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
									"    pm.expect(jsonData[0]).to.have.property(\"name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let name = \"User \" + Math.floor(Math.random() * 1000).toString();\r",
									"let username = \"User_\" + Math.random().toString(36).substring(7);\r",
									"let email = \"user\" + Math.floor(Math.random() * 1000).toString() + \"@test.com\";\r",
									"let phone = \"+1-555-\" + Math.floor(Math.random() * 1000).toString();\r",
									"\r",
									"console.log(\"Generated Name:\", name);\r",
									"console.log(\"Generated Username:\", username);\r",
									"console.log(\"Generated Email:\", email);\r",
									"console.log(\"Generated Phone:\", phone);\r",
									"\r",
									"pm.environment.set(\"name\", name);\r",
									"pm.environment.set(\"username\", username);\r",
									"pm.environment.set(\"email\", email);\r",
									"pm.environment.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"pm.environment.set(\"createdUserId\", responseData.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"username\": \"{{username}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"phone\": \"{{phone}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{user_id}},\r\n  \"name\": \"Rain\",\r\n  \"username\": \"RainApi\",\r\n  \"email\": \"rain@gmail.com\",\r\n  \"address\": {\r\n    \"street\": \"202\",\r\n    \"suite\": \"Apt. 999\",\r\n    \"city\": \"abc\",\r\n    \"zipcode\": \"99999-9999\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or empty JSON\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"\", \"{}\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "GET All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each comment has required fields\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(comment => {\r",
									"        pm.expect(comment).to.have.property(\"postId\");\r",
									"        pm.expect(comment).to.have.property(\"id\");\r",
									"        pm.expect(comment).to.have.property(\"name\");\r",
									"        pm.expect(comment).to.have.property(\"email\");\r",
									"        pm.expect(comment).to.have.property(\"body\");\r",
									"    });\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"comment_id\", jsonData[0].id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a Single Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct comment ID\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"comment_id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"postId\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"body\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"comment_id\", \"1\");  // The hardcoded 1 in the pre-request script is just a safety fallback."
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a New Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"name\")) {\r",
									"    pm.environment.set(\"name\", \"User \" + Math.floor(Math.random() * 1000));\r",
									"}\r",
									"if (!pm.environment.get(\"email\")) {\r",
									"    pm.environment.set(\"email\", \"user\" + Math.floor(Math.random() * 1000) + \"@test.com\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status Code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(Number(jsonData.postId)).to.equal(Number(pm.environment.get(\"post_id\"))); // Convert both to numbers\r",
									"    pm.expect(jsonData).to.have.property(\"name\", pm.environment.get(\"name\"));\r",
									"    pm.expect(jsonData).to.have.property(\"email\", pm.environment.get(\"email\"));\r",
									"    pm.expect(jsonData).to.have.property(\"body\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"comment_id\", jsonData.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postId\": \"{{post_id}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"body\": \"This is a sample comment created via API.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let commentId = pm.environment.get(\"comment_id\");\r",
									"pm.test(\"Check if comment_id exists before deleting\", function () {\r",
									"    pm.expect(commentId).to.not.be.undefined;\r",
									"    pm.expect(commentId).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200 (Deleted Successfully)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or empty JSON\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"\", \"{}\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Fetch All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare jsonData once at the start\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Posts list is not empty\", function () {\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"First post ID is stored\", function () {\r",
									"    pm.expect(jsonData[0].id).to.be.a(\"number\");\r",
									"    pm.environment.set(\"post_id\", jsonData[0].id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Single Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Post ID matches stored variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"post_id\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/{{post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"post_title\", \"Post \" + Math.random().toString(36).substring(7));\r",
									"\r",
									"pm.environment.set(\"post_body\", \"This is a dynamically generated post.\");\r",
									"\r",
									"pm.environment.set(\"userId\", pm.environment.get(\"createdUserId\"));  // Linking to created user"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains new post ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.environment.set(\"new_post_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Title and body match the request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"post_title\"));\r",
									"    pm.expect(jsonData.body).to.eql(pm.environment.get(\"post_body\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{post_title}}\",\r\n    \"body\": \"{{post_body}}\",\r\n    \"userId\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or empty JSON\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"\", \"{}\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/{{new_post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"{{new_post_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NegativeTests",
			"item": [
				{
					"name": "Get User by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Handle both empty object `{}` and empty string `\"\"`\r",
									"pm.test(\"Response body is empty or contains no meaningful data\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response is an empty object `{}` or empty string `\"\"`\r",
									"    let isEmptyObject = Object.keys(jsonData).length === 0 && jsonData.constructor === Object;\r",
									"    let isEmptyString = pm.response.text().trim() === \"\";\r",
									"\r",
									"    pm.expect(isEmptyObject || isEmptyString).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment with Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postId\": \"{{post_id}}\",\r\n    \"name\": \"Invalid Comment\",\r\n    \"email\": \"invalid-email\",\r\n    \"body\": \"This is a test comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Album by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Album",
			"item": [
				{
					"name": "Get All Albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status Code is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains at least one album\", function () {\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"album_id\", jsonData[0].id);\r",
									"pm.environment.set(\"album_title\", jsonData[0].title);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status Code is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Album has correct fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\", Number(pm.environment.get(\"album_id\")));\r",
									"    pm.expect(jsonData).to.have.property(\"userId\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"title\").that.is.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums/{{album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"{{album_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a New Album",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"random_album_number\", Math.floor(Math.random() * 1000));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status Code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"New album contains correct data\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Album \" + pm.environment.get(\"random_album_number\"));\r",
									"    pm.expect(Number(jsonData.userId)).to.equal(Number(pm.environment.get(\"createdUserId\")));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"new_album_id\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Album {{random_album_number}}\",\r\n    \"userId\": \"{{createdUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200 (Deleted)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or empty JSON\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"\", \"{}\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums/{{new_album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"{{new_album_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}